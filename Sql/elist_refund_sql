-- Creating a brand category and totaling the amount of refunds per month
-- Filtering to the year 2020
WITH refund_counts_cte AS (
    SELECT
        CASE
            WHEN LOWER(orders.product_name) LIKE '%airpod%'  THEN 'Airpod'
            WHEN LOWER(orders.product_name) LIKE '%macbook%' THEN 'Macbook'
            WHEN LOWER(orders.product_name) LIKE '%iphone%' THEN 'iPhone'
            WHEN LOWER(orders.product_name) LIKE '%samsung%' THEN 'Samsung'
            WHEN LOWER(orders.product_name) LIKE '%thinkpad%' THEN 'ThinkPad'
            WHEN LOWER(orders.product_name) LIKE '%bose%' THEN 'Bose'
            WHEN LOWER(orders.product_name) LIKE '%monitor%' THEN 'Monitor'
            ELSE 'Unknown'
        END AS brand,
        DATE_TRUNC(order_status.refund_ts, MONTH) AS month,
        COUNT(order_status.refund_ts) AS num_refunds
    FROM 
        elist.orders AS orders 
    JOIN 
        elist.order_status AS order_status 
    ON 
        orders.id = order_status.id  -- Adjust the join to use 'id' instead of 'order_id'
    WHERE 
        EXTRACT(YEAR FROM order_status.refund_ts) = 2020
    GROUP BY 
        1, 2  -- Grouping by brand and month
),
-- Ranking refunds per brand to get the highest month per brand
ranked_refunds_cte AS (
    SELECT
        brand,
        month,
        num_refunds,
        ROW_NUMBER() OVER (PARTITION BY brand ORDER BY num_refunds DESC) AS rnk
    FROM 
        refund_counts_cte
)
-- Selecting the highest refund month for each brand
SELECT
    brand, 
    month, 
    num_refunds
FROM 
    ranked_refunds_cte
WHERE 
    rnk = 1
ORDER BY 
    brand;

